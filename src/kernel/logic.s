@ logic.s
@ ------------------------------------------------------------------------

@ ------------------------------------------------------------------------

  _constant_ "true", true,  -1
  _constant_ "false", false, 0

@ ------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code "and", and_
  pop { r1 }
  ands r0, r0, r1
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code "or", or_
  pop { r1 }
  orrs r0, r0, r1
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code "xor", xor
  pop { r1 }
  eors r0, r0, r1
  next

@ ------------------------------------------------------------------------

@       ( n1 --- n3 )

code "not", not
  mvns r0, r0
  next

@ ------------------------------------------------------------------------

@       ( n1 --- f1 )

code "0=", zequals
  subs r0, r0, #1
  sbcs r0, r0, r0
  next

@ ------------------------------------------------------------------------

@       ( d1 --- f1 )

code "d0=", dzequ
  pop { r1 }
  orr r0, r0, r1
  b zequals

@ ------------------------------------------------------------------------

@       ( n1 --- f1 )

code "0<>", znotequ
  subs r0, r0, #1
  sbc r0, r0, r0
  mvn r0, r0
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- f1 )

code "=", equals
  pop { r1 }
  subs r0, r0, r1
  subs r0, r0, #1
  sbcs r0, r0, r0
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- f1 )

colon "<>", notequals
  bl equals
  bl not
  exit

@ ------------------------------------------------------------------------

@       ( n1 --- f1 )

code "0<", zless
  movs r0, r0, asr #31
  next

@ ------------------------------------------------------------------------

@       ( n1 --- f1 )

code "0>", zgreater
  rsb r0, r0, #0
  movs r0, r0, asr #31
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code "u<", uless
  pop { r1 }
  subs r0, r1, r0
  sbcs r0, r0, r0
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code "u>", ugreater
  pop { r1 }
  subs r0, r0, r1
  sbcs r0, r0, r0
  next

@ ------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code "<", less
  pop { r1 }
  cmp r1, r0
  ite lt
  movlt r0, #-1
  movge r0, #0
  next

@-------------------------------------------------------------------------

@       ( n1 n2 --- n3 )

code ">", greater
  pop { r1 }
  cmp r1, r0
  ite gt
  movgt r0, #-1
  movle r0, #0
  next

@ ------------------------------------------------------------------------

@     ( d1 d2 --- f1 )

colon "d=", dequals
  bl dminus
  bl or_
  bl zequals
  exit

@ ------------------------------------------------------------------------

@       ( d1 --- f1 )

code "d0<", dzless
  add sp, sp, #4
  movs r0, r0, asr #31
  next

@ ------------------------------------------------------------------------

@       ( d1 d2 --- f1 )

colon "d<", dless
  bl dminus
  bl dzless
  next

@ ------------------------------------------------------------------------

@       ( d1 d2 --- f1 )

colon "d>", dgreater
  bl twoswap
  bl dless
  exit

@ ------------------------------------------------------------------------

@       ( d1 d2 -- f1 )

colon "d<>", dnotequ
  bl dequals
  bl not
  exit

@ ------------------------------------------------------------------------

@     ( n1 n2 --- n1 | n2 )

code "min", min
  pop { r1 }
  cmp r0, r1
  it gt
  movgt r0, r1
  next

@ ------------------------------------------------------------------------

@     ( n1 n2 --- n1 | n2 )

code "max", max
  pop { r1 }
  cmp r0, r1
  it lt
  movlt r0, r1
  next

@ ------------------------------------------------------------------------

@     ( n1 n2 --- n1 | n2 )

code "umin", umin
  pop { r1 }
  cmp r0, r1
  it hi
  movhi r0, r1
  next

@ ------------------------------------------------------------------------

@     ( n1 n2 --- n1 | n2 )

code "umax", umax
  pop { r1 }
  cmp r0, r1
  it lo
  movlo r0, r1
  next

@ ------------------------------------------------------------------------

@     ( n1 lower upper --- f1 )

code "between", between
  pop { r1, r2 }
  cmp r2, r0
  it le
  cmple r1, r2
  ite le
  mvnle r0, #0
  movgt r0, #0
  next

@ ------------------------------------------------------------------------

@     ( n1 lower upper --- f1 )

code "within", within
  pop { r1, r2 }
  cmp r2, r0
  it lt
  cmplt r1, r2
  ite lt
  mvnlt r0, #0
  movge r0, #0
  next

@ ========================================================================
